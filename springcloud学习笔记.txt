参考博客 https://www.cnblogs.com/kkdn/p/9334207.html
一，微服务简介
    以开发一组小型服务的方式来开发出一个独立的系统，即系统是由多个微服务组成。
    每个小型服务都独立运行在自己的进程中，互不影响。
    服务间采用http rpc rest api等轻量的机制进行通讯。
    每个小型服务都围绕业务功能进行构建，并独立部署。
    各服务可以开发语言不同，数据存储技术不同，功能不同，可相互调用，并且可集中管理。
    [拓展：深入理解微服务九大特征](http://developer.51cto.com/art/201608/516401.htm)

二，微服务优缺点
    易于开发维护
    启动部署较快
    局部修改易
    不受限于技术栈
    按需收缩
    devops
    [拓展：微服务的优势与不足](http://dockone.io/article/394)

三，微服务之spring-cloud
    NetFlix公司提供了包括Eureka，Hystrix,zuul,Archaius等在内的很多组件，Spring在NetFlix基础上
    封装了一系列的组件，命名为Spring Cloud Eureka,Spring Cloud Histrix,Spring Cloud Zuul等

        Spring Cloud Eureka
            负责服务的注册与发现，Eureka体系包括 服务注册中心 服务提供者 服务消费者
            服务提供者向eureka 提供服务的注册 续约 下线等服务
            服务消费者向eureka注册中心拉取服务列表并维护在本地
        Spring Cloud Ribbon
            eureka只是维护了生产者 消费者 和 注册中心 三者之间的关系 真正消费者调用服务者的数据是通过Ribbon实现的
            消费者将服务从注册中心获取生产者服务列表并维护在本地的，这种客户端发现模式的方式是消费者选择合适的节点
            进行访问生产者提供的数据，这种选择合适节点的过程就是Ribbon负责的，Ribbon客户端负载均衡器由此而来。
        Spring Cloud Feign
            具体使用Ribbon调用服务的话，方式比较复杂，于是Feign应运而生。Feign是一个声明web服务客户端，使得编写web服务
            客户端更容易，使用Feign创建一个接口并对它进行注解，Feign具有可插拔的注解包括Feign注解和JAX-RS注解，Feign还
            支持可插拔的编码器和解码器，Spring Cloud增加了对SpringMVC的注解，SpringWeb默认使用了HttpMessageConverters
            SpringCloud集成Ribbon和Eureka提供的负载均衡的Http客户端Feign。
            简单理解为：Spring Cloud Feign的出现使得Eureka和Ribbon的使用更为简单。
        Spring Cloud Hystrix
            Eureka提供服务的注册与发现，Ribbon实现了服务负载均衡的调用，Feign可以简化Ribbon调用简化我们的编码，但还不足以实现
            一个高可用的微服务架构。
            例：当一个服务节点出现故障，而服务调用方并不知道服务故障，随着调用方请求的不断增加，形成任务积压，导致服务瘫痪。
            Hystrix含义即为断路器，防止请求的过载。
        Spring Cloud Config
            分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件，即Spring Cloud Config
            它支持配置服务放在配置服务的内存中（本地），也支持放在远程git仓库中，在Spring Cloud Config组件中，分为两个角色，一个是
            Config Server 一个是Config Client，Server用于配置属性的存储，存储位置可以是git仓库，svn仓库，本地文件等，Client用于服务
            属性的读取。
        Spring Cloud Zuul
            Spring Cloud NetFlix中，Eureka实现了服务的注册与发现，服务间通过Ribbon或Feign实现服务的消费以及负载均衡，通过Config实现了
            应用多环境的外部化配置以及版本管理，为了使服务集群更为健壮，使用Hystrix的熔断机制避免在微服务架构中个别服务出现异常时引起的故障
            蔓延。
            但存在不足：
        Spring Cloud Bus
            消息总线

        各组件作用：
            1、Spring Cloud Config：配置管理开发工具包，可以让你把配置放到远程服务器，目前支持本地存储、Git以及Subversion。

            2、Spring Cloud Bus：事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。

            3、Spring Cloud Netflix：针对多种Netflix组件提供的开发工具包，其中包括Eureka、Hystrix、Zuul、Archaius等。

            4、Netflix Eureka：云端负载均衡，一个基于 REST 的服务，用于定位服务，以实现云端的负载均衡和中间层服务器的故障转移。

            5、Netflix Hystrix：容错管理工具，旨在通过控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。

            6、 Netflix Zuul：边缘服务工具，是提供动态路由，监控，弹性，安全等的边缘服务。

            7、Netflix Archaius：配置管理API，包含一系列配置管理API，提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。

            8、Spring Cloud for Cloud Foundry：通过Oauth2协议绑定服务到CloudFoundry，CloudFoundry是VMware推出的开源PaaS云平台。

            9、Spring Cloud Sleuth：日志收集工具包，封装了Dapper,Zipkin和HTrace操作。

            10、Spring Cloud Data Flow：大数据操作工具，通过命令行方式操作数据流。

            11、Spring Cloud Security：安全工具包，为你的应用程序添加安全控制，主要是指OAuth2。

            12、Spring Cloud Consul：封装了Consul操作，consul是一个服务发现与配置工具，与Docker容器可以无缝集成。

            13、Spring Cloud Zookeeper：操作Zookeeper的工具包，用于使用zookeeper方式的服务注册和发现。

            13、Spring Cloud Stream：数据流操作开发包，封装了与Redis,Rabbit、Kafka等发送接收消息。

            14、Spring Cloud CLI：基于 Spring Boot CLI，可以让你以命令行方式快速建立云组件。

        参考代码：https://gitee.com/xuliugen/springcloud-demo